<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.EmployeeMapper">
    <!-- マッピング（SELECT文用resultMap） -->
    <resultMap id="employeeResult" type="com.example.demo.entity.Employee">
        <id column="code" property="code" />
        <result column="first_name" property="firstName" />
        <result column="last_name" property="lastName" />
        <result column="password" property="password" />
        <result column="role" property="role" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
        <result column="delete_flg" property="deleteFlg" />
    </resultMap>
    <!-- 全件取得 -->
    <select id="selectAll" resultMap="employeeResult">
        <!-- 論理削除採用のため「WHERE delete_flg = 0」を追記 -->
        SELECT code, first_name, last_name
        FROM employee
        WHERE delete_flg = 0
        ORDER BY created_at;
    </select>
    <!-- 検索取得 -->
    <select id="selectAllByKeyword" resultMap="employeeResult">
        <!-- 論理削除採用のため「WHERE delete_flg = 0」を追記 -->
        SELECT code, first_name, last_name
        FROM employee
        WHERE delete_flg = 0 AND
            (code LIKE CONCAT('%', #{keyword}, '%')
            OR first_name LIKE CONCAT('%', #{keyword}, '%')
            OR last_name LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY created_at;
    </select>
    <!-- 一件取得 -->
    <select id="selectByCode" resultMap="employeeResult">
        <!-- 論理削除採用のため「WHERE delete_flg = 0」を追記 -->
        SELECT *
        FROM employee
        WHERE delete_flg = 0 AND code = #{code};
    </select>
    <!-- 登録実行 -->
    <insert id="insert" parameterType="com.example.demo.entity.Employee">
        <!-- 論理削除採用のため「delete_flg」と値「0」を追記 -->
        INSERT INTO employee (code, first_name, last_name, password, role,
            created_at, updated_at, delete_flg)
        VALUES (#{code}, #{firstName}, #{lastName}, #{password}, #{role},
            CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
    </insert>
    <!-- 更新実行 -->
    <update id="update" parameterType="com.example.demo.entity.Employee">
        <!-- 論理削除採用のため「delete_flg」と値「0」を追記 -->
        UPDATE employee
        SET first_name = #{firstName}, last_name = #{lastName},
            password = #{password}, role = #{role}, updated_at = CURRENT_TIMESTAMP
        WHERE code = #{code};
    </update>
    <!-- 削除実行 -->
    <delete id="delete" parameterType="String">
        <!-- 物理削除　↓　※物理削除ではリレーションがある場合に削除エラーが発生するため論理削除へ変更
        DELETE FROM employee
        WHERE code = #{code};-->
        <!-- 論理削除　↓ ※select、insertの各SQLに「delete_flg」を追記 -->
        UPDATE employee
        SET delete_flg = 1
        WHERE code = #{code};
    </delete>
</mapper>